import jsPDF from 'jspdf'

export interface ReportData {
  companyName: string
  contactName: string
  contactEmail: string
  website?: string
  departmentFocus: string
  analysisDate: string
  businessReportContent: string
}

export class PDFReportGenerator {
  private doc: jsPDF
  private pageWidth: number
  private pageHeight: number
  private margin: number
  private currentY: number
  private pageNumber: number

  constructor() {
    this.doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })
    this.pageWidth = this.doc.internal.pageSize.getWidth()
    this.pageHeight = this.doc.internal.pageSize.getHeight()
    this.margin = 20
    this.currentY = this.margin
    this.pageNumber = 1
  }

  /**
   * Generate the complete business analysis report from text content
   */
  async generateReport(reportData: ReportData): Promise<Buffer> {
    // Cover page
    this.addCoverPage(reportData)
    
    // Add the business report content
    this.addNewPage()
    this.addBusinessReportContent(reportData.businessReportContent)
    
    // Footer on all pages
    this.addFootersToAllPages()
    
    // Convert to buffer
    const pdfBuffer = Buffer.from(this.doc.output('arraybuffer'))
    return pdfBuffer
  }

  /**
   * Add cover page
   */
  private addCoverPage(reportData: ReportData): void {
    // VeloxForce branding
    this.doc.setFontSize(28)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(10, 42, 79) // Deep blue
    this.addText('VeloxForce', this.margin, 40)
    
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'normal')
    this.doc.setTextColor(100, 100, 100)
    this.addText('Service-as-Software Solutions', this.margin, 50)
    
    // Report title
    this.doc.setFontSize(24)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(0, 0, 0)
    this.addText('Business Automation', this.margin, 80)
    this.addText('Analysis Report', this.margin, 92)
    
    // Company information
    this.doc.setFontSize(16)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(10, 42, 79)
    this.addText(`Prepared for: ${reportData.companyName}`, this.margin, 120)
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    this.doc.setTextColor(80, 80, 80)
    this.addText(`Contact: ${reportData.contactName}`, this.margin, 132)
    this.addText(`Email: ${reportData.contactEmail}`, this.margin, 142)
    if (reportData.website) {
      this.addText(`Website: ${reportData.website}`, this.margin, 152)
    }
    this.addText(`Department Focus: ${reportData.departmentFocus}`, this.margin, 162)
    this.addText(`Analysis Date: ${reportData.analysisDate}`, this.margin, 172)
    
    // Decorative elements
    this.doc.setDrawColor(10, 42, 79)
    this.doc.setLineWidth(2)
    this.doc.line(this.margin, 200, this.pageWidth - this.margin, 200)
    
    // Confidential notice
    this.doc.setFontSize(10)
    this.doc.setFont('helvetica', 'italic')
    this.doc.setTextColor(150, 150, 150)
    this.addText('This report contains confidential business analysis and recommendations.', this.margin, 250)
    this.addText('Generated by VeloxForce AI-powered business intelligence platform.', this.margin, 260)
  }

  /**
   * Add business report content (text/markdown)
   */
  private addBusinessReportContent(reportContent: string): void {
    this.addSectionHeader('Business Analysis Report')
    this.currentY += 10
    
    // Split the content into paragraphs and sections
    const lines = reportContent.split('\n')
    
    this.doc.setFontSize(11)
    this.doc.setFont('helvetica', 'normal')
    this.doc.setTextColor(60, 60, 60)
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      
      if (!trimmedLine) {
        // Empty line - add some space
        this.currentY += 5
        continue
      }
      
      // Check if we need a new page
      if (this.currentY > this.pageHeight - 40) {
        this.addNewPage()
      }
      
      if (trimmedLine.startsWith('#')) {
        // This is a heading - determine the level
        const headingMatch = trimmedLine.match(/^(#+)\s*(.*)/)
        if (headingMatch) {
          const level = headingMatch[1].length
          const headingText = headingMatch[2]
          this.addHeading(headingText, level)
        }
      } else if (trimmedLine.startsWith('**') && trimmedLine.endsWith('**')) {
        // This is bold text
        this.addBoldText(trimmedLine.replace(/\*\*/g, ''))
      } else {
        // Regular paragraph text
        this.addParagraph(trimmedLine)
      }
    }
  }

  /**
   * Add heading text with widow/orphan protection
   */
  private addHeading(text: string, level: number = 1): void {
    // Calculate required space based on heading level
    // Level 1 (#): Need space for heading + 8 lines (approx 48mm)
    // Level 2 (##): Need space for heading + 5 lines (approx 30mm)
    // Level 3+ (###): Need space for heading + 3 lines (approx 18mm)
    let requiredSpace: number
    let fontSize: number
    
    if (level === 1) {
      requiredSpace = 48
      fontSize = 16
    } else if (level === 2) {
      requiredSpace = 30
      fontSize = 14
    } else {
      requiredSpace = 18
      fontSize = 12
    }
    
    // Check if we have enough space on current page
    const spaceRemaining = this.pageHeight - this.currentY - 40 // 40mm bottom margin
    if (spaceRemaining < requiredSpace) {
      // Not enough space, move to next page
      this.addNewPage()
    }
    
    // Add some space before heading
    this.currentY += 5
    
    // Set heading style
    this.doc.setFontSize(fontSize)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(10, 42, 79) // Deep blue
    this.addText(text, this.margin, this.currentY)
    this.currentY += fontSize * 0.7 // Dynamic spacing based on font size
    
    // Reset to normal text
    this.doc.setFontSize(11)
    this.doc.setFont('helvetica', 'normal')
    this.doc.setTextColor(60, 60, 60)
  }

  /**
   * Add bold text with widow protection
   */
  private addBoldText(text: string): void {
    // Check if we have enough space for bold text + 3 lines (approx 18mm)
    const requiredSpace = 18
    const spaceRemaining = this.pageHeight - this.currentY - 40
    
    if (spaceRemaining < requiredSpace) {
      // Not enough space, move to next page
      this.addNewPage()
    }
    
    this.doc.setFont('helvetica', 'bold')
    this.addText(text, this.margin, this.currentY)
    this.currentY += 7
    
    // Reset to normal text
    this.doc.setFont('helvetica', 'normal')
  }

  /**
   * Add paragraph text with word wrapping
   */
  private addParagraph(text: string): void {
    const maxWidth = this.pageWidth - (this.margin * 2)
    const words = text.split(' ')
    let currentLine = ''
    
    for (const word of words) {
      const testLine = currentLine ? `${currentLine} ${word}` : word
      const textWidth = this.doc.getTextWidth(testLine)
      
      if (textWidth > maxWidth && currentLine) {
        // Current line is full, print it and start a new line
        this.addText(currentLine, this.margin, this.currentY)
        this.currentY += 6
        currentLine = word
        
        // Check if we need a new page
        if (this.currentY > this.pageHeight - 40) {
          this.addNewPage()
        }
      } else {
        currentLine = testLine
      }
    }
    
    // Print the last line
    if (currentLine) {
      this.addText(currentLine, this.margin, this.currentY)
      this.currentY += 6
    }
    
    this.currentY += 2 // Add some space after paragraph
  }

  // Note: Removed old methods that handled structured BusinessAnalysisResponse data
  // The system now uses addBusinessReportContent() to handle text/markdown reports

  /**
   * Helper methods
   */
  private addNewPage(): void {
    this.doc.addPage()
    this.pageNumber++
    this.currentY = this.margin
  }

  private addSectionHeader(title: string): void {
    // Check if we have enough space for section header + content (approx 48mm)
    const requiredSpace = 48
    const spaceRemaining = this.pageHeight - this.currentY - 40
    
    if (spaceRemaining < requiredSpace) {
      // Not enough space, move to next page
      this.addNewPage()
    }
    
    this.doc.setFontSize(16)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(10, 42, 79)
    this.addText(title, this.margin, this.currentY)
    this.currentY += 8
    
    // Underline
    this.doc.setDrawColor(10, 42, 79)
    this.doc.setLineWidth(0.5)
    this.doc.line(this.margin, this.currentY, this.margin + 60, this.currentY)
    this.currentY += 5
  }

  private addText(text: string, x: number, y: number): void {
    this.doc.text(text, x, y)
  }

  private addFootersToAllPages(): void {
    const totalPages = this.doc.getNumberOfPages()
    
    for (let i = 1; i <= totalPages; i++) {
      this.doc.setPage(i)
      
      // Page number
      this.doc.setFontSize(9)
      this.doc.setFont('helvetica', 'normal')
      this.doc.setTextColor(150, 150, 150)
      this.doc.text(
        `Page ${i} of ${totalPages}`,
        this.pageWidth - this.margin - 20,
        this.pageHeight - 10
      )
      
      // VeloxForce footer
      this.doc.text(
        'VeloxForce - Service-as-Software Solutions',
        this.margin,
        this.pageHeight - 10
      )
    }
  }
}

// Export function for easy use
export async function generateBusinessReport(reportData: ReportData): Promise<Buffer> {
  const generator = new PDFReportGenerator()
  return await generator.generateReport(reportData)
}